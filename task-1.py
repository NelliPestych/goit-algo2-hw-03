import networkx as nx
import pandas as pd
from networkx.algorithms.flow import edmonds_karp

# Створення орієнтованого графа
G = nx.DiGraph()

# Додавання ребер з пропускною здатністю
edges = [
    ("Термінал 1", "Склад 1", 25),
    ("Термінал 1", "Склад 2", 20),
    ("Термінал 1", "Склад 3", 15),
    ("Термінал 2", "Склад 3", 15),
    ("Термінал 2", "Склад 4", 30),
    ("Термінал 2", "Склад 2", 10),

    ("Склад 1", "Магазин 1", 15),
    ("Склад 1", "Магазин 2", 10),
    ("Склад 1", "Магазин 3", 20),

    ("Склад 2", "Магазин 4", 15),
    ("Склад 2", "Магазин 5", 10),
    ("Склад 2", "Магазин 6", 25),

    ("Склад 3", "Магазин 7", 20),
    ("Склад 3", "Магазин 8", 15),
    ("Склад 3", "Магазин 9", 10),

    ("Склад 4", "Магазин 10", 20),
    ("Склад 4", "Магазин 11", 10),
    ("Склад 4", "Магазин 12", 15),
    ("Склад 4", "Магазин 13", 5),
    ("Склад 4", "Магазин 14", 10)
]

# Додати джерело та стік
G.add_node("Джерело")
G.add_node("Стік")

# Джерело → Термінали
G.add_edge("Джерело", "Термінал 1", capacity=999)
G.add_edge("Джерело", "Термінал 2", capacity=999)

# Основні ребра
for u, v, c in edges:
    G.add_edge(u, v, capacity=c)

# Магазини → Стік
for i in range(1, 15):
    G.add_edge(f"Магазин {i}", "Стік", capacity=999)

# Обчислення максимального потоку
flow_value, flow_dict = nx.maximum_flow(G, "Джерело", "Стік", flow_func=edmonds_karp)

# Побудова таблиці з фактичними потоками
rows = []
for terminal in ["Термінал 1", "Термінал 2"]:
    for sklad in flow_dict[terminal]:
        for shop in flow_dict[sklad]:
            if "Магазин" in shop:
                rows.append({
                    "Термінал": terminal,
                    "Магазин": shop,
                    "Фактичний Потік (одиниць)": flow_dict[sklad][shop]
                })

df = pd.DataFrame(rows)
print(df)
print("\nМаксимальний загальний потік:", flow_value)
